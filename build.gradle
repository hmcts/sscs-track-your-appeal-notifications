plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'org.sonarqube' version '2.7.1'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'org.owasp.dependencycheck' version '5.2.2'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'net.ltgt.apt' version '0.21'
    id "org.flywaydb.flyway" version "5.0.7"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

mainClassName = 'uk.gov.hmcts.reform.sscs.TrackYourAppealNotificationsApplication'

checkstyle {
    maxWarnings = 0
    toolVersion = '8.24'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}


pmd {
    toolVersion = "6.5.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "SSCS - Track Your Appeal Notifications"
        property "sonar.projectKey", "SSCSTYANS"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/sscs/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/sscs/TrackYourAppealNotificationsApplication.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/servicebus/messaging/**," +
                "src/main/java/uk/gov/hmcts/reform/sscs/config/**,"
    }
}

bootRun {
    systemProperty 'server.port', '8081'
}

ext {
    springCloudVersion = 'Finchley.SR1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    dependencies {
        // Solves CVE-2019-10086
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

        // checkstyle needs a certain version and so does spring fox swagger, so can't use latest
        dependencySet(group: 'com.google.guava', version: '28.1-jre') {
            entry 'guava'
        }
        // CVE-2019-0232, CVE-2019-0199 - command line injections on windows
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.30') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }

        // CVE-2019-16869 - brought in by qpid-jms-client
        dependencySet(group: 'io.netty', version: '4.1.44.Final') {
            entry 'netty-handler'
            entry 'netty-transport-native-epoll'
            entry 'netty-transport-native-kqueue'
            entry 'netty-codec-http'
            entry 'netty-codec'
            entry 'netty-transport-native-unix-common'
            entry 'netty-transport'
            entry 'netty-buffer'
            entry 'netty-resolver'
            entry 'netty-common'
        }

        // solves CVE-2019-13990
        dependencySet(
                group: 'org.quartz-scheduler',
                version: '2.3.2'
        ) {
            entry 'quartz'
        }

        // resolves: CVE-2019-10101, CVE-2019-10102, CVE-2019-10103
        dependencySet(group: 'org.jetbrains.kotlin', version: '1.3.60') {
            entry 'kotlin-stdlib'
        }
    }
}

repositories {

    mavenLocal()

    maven {
        url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
    jcenter()
    mavenCentral()

    // jitpack should be last resort
    // see: https://github.com/jitpack/jitpack.io/issues/1939
    maven { url 'https://jitpack.io' }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/IntegrationTests/java')
        }
    }
    e2e {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/e2e/java')
        }
        resources {
            srcDir('src/e2e/resources')
        }
    }

}

task integration(type: Test) {
    group = 'verification'
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task smoke(type: Test) {
    group = 'verification'
    description = 'Executes non-destructive smoke tests against a running CCD and notification service'
    setTestClassesDirs(sourceSets.e2e.output.classesDirs)
    setClasspath(sourceSets.e2e.runtimeClasspath)
    include "uk/gov/hmcts/reform/sscs/smoke/**"
    exclude "uk/gov/hmcts/reform/sscs/functional/**"
}

task functional(type: Test) {
    group = 'verification'
    description = 'Executes non-destructive functional tests in AAT against a running CCD and notification service'
    setTestClassesDirs(sourceSets.e2e.output.classesDirs)
    setClasspath(sourceSets.e2e.runtimeClasspath)
    include "uk/gov/hmcts/reform/sscs/functional/**"
    exclude("uk/gov/hmcts/reform/sscs/smoke/**", "**/*CohNotificationFunctionalTest*")
}

configurations {
    integrationTestCompile.extendsFrom(testCompile)
    integrationTestRuntime.extendsFrom(testRuntime)
    e2eCompile.extendsFrom(testCompile)
    e2eRuntime.extendsFrom(testRuntime)
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
check.dependsOn integration
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)
integration.shouldRunAfter(checkstyleIntegrationTest)
integration.shouldRunAfter(test)
functional.shouldRunAfter(checkstyleIntegrationTest)
functional.shouldRunAfter(test)

def versions = [
        logback         : '1.2.3',
        reformLogging   : '5.0.1',
        springHystrix   : '1.4.2.RELEASE',
        springfoxSwagger: '2.8.0'
]

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
                details.useVersion '2.10.0'
            }
        }
    }
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile group: 'com.mchange', name: 'c3p0', version: '0.9.5.4'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '5.1.0'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
    compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.10.3'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: versions.springHystrix
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'

    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.13.1'
    compile group: 'org.springframework', name: 'spring-jms'
    compile group: 'org.apache.qpid', name: 'qpid-jms-client', version: '0.48.0'

    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version:'0.0.4'
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '2.0.0'
    compile group: 'uk.gov.hmcts.reform', name: 'sscs-job-scheduler', version: '1.5.2'
    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.0.0'

    compile group: 'uk.gov.hmcts.reform', name: 'sscs-common', version: '3.1.15'
    compile group: 'uk.gov.hmcts.reform', name: 'sscs-pdf-email-common', version: '1.2.4'

    compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.15.0-RELEASE'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'
    compile group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'

    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.17'

    compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: '2.5.0'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '2.5.1'

    compileOnly("org.springframework.boot:spring-boot-devtools")

    compile 'org.projectlombok:lombok:1.18.10'
    annotationProcessor "org.projectlombok:lombok:1.18.10"
    testCompileOnly 'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor "org.projectlombok:lombok:1.18.8"
    integrationTestCompileOnly 'org.projectlombok:lombok:1.18.6'
    integrationTestAnnotationProcessor "org.projectlombok:lombok:1.18.6"

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.2.1.RELEASE') {
        exclude group: "com.vaadin.external.google", module:"android-json"
    }
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
    testCompile 'pl.pragmatists:JUnitParams:1.1.1'

    runtime "org.springframework.boot:spring-boot-properties-migrator"
}

bootJar {
    archiveName 'track-your-appeal-notifications.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006']
    }
}

def dbHost = System.env.JOB_SCHEDULER_DB_HOST ?: "localhost"
def dbPort = System.env.JOB_SCHEDULER_DB_PORT ?: 5432
def dbName = System.env.JOB_SCHEDULER_DB_NAME ?: "sscsjobscheduler"
def dbUser = System.env.JOB_SCHEDULER_DB_USERNAME ?: "sscsjobscheduler"
def dbPass = System.env.JOB_SCHEDULER_DB_PASSWORD ?: "sscsjobscheduler"

flyway {
    url = 'jdbc:postgresql://' + dbHost + ':' + dbPort + '/' + dbName
    user = dbUser
    password = dbPass
}
