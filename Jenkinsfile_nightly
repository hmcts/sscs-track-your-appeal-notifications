#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 5 * * *')]),
  parameters([
                string(name: 'URL_TO_TEST', defaultValue: 'http://sscs-tya-notif-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
                string(name: 'SecurityRules',
                        defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                        description: 'The URL you want to run these tests against'),
        ])
])

@Library("Infrastructure")

def type = "java"
def product = "sscs"
def component = "tya-notif"

def secrets = [
    'sscs-${env}': [
        secret('idam-api', 'IDAM_URL'),
        secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
        secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
        secret('notification-key', 'NOTIFICATION_API_KEY'),
        secret('notification-test-key', 'NOTIFICATION_API_TEST_KEY'),
        secret('sscs-email-mac-secret-text', 'EMAIL_MAC_SECRET_TEXT'),
        secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
        secret('idam-oauth-user', 'IDAM_OAUTH2_CLIENT_ID'),
        secret('ccd-api', 'CORE_CASE_DATA_API_URL'),
        secret('ccd-jid', 'CORE_CASE_DATA_JURISDICTION_ID'),
        secret('ccd-tid', 'CORE_CASE_DATA_CASE_TYPE_ID'),
        secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
        secret('tya-link', 'SSCS_TRACK_YOUR_APPEAL_LINK'),

        secret('sscs-s2s-secret', 'IDAM.S2S-AUTH.TOTP_SECRET'),
        secret('s2s-micro', 'IDAM.S2S-AUTH.MICROSERVICE'),

        secret('docmosis-endpoint', 'PDF_SERVICE_BASE_URL'),
        secret('docmosis-api-key', 'PDF_SERVICE_ACCESS_KEY'),
        secret('sscs-asb-primary-send-and-listen-shared-access-key', 'AMQP_PASSWORD'),
        secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),

        // Used by Kubernetes
        secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
        secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.Rules = params.SecurityRules

    loadVaultSecrets(secrets)
    enableFortifyScan()
    enableSecurityScan()
    enableFullFunctionalTest()
    enableSlackNotifications('#sscs-tech')

    after('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }
}
